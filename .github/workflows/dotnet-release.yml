# When a release is published on github.com, this workflow creates a release build and uploads it to the release page

name: Release

on:
  release:
    types: [ published ]

jobs:

  portable:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/build
        id: build
        with:
          configuration: Release
          flavor: Portable
          artifact: release_artifact_portable
      - name: Create zip
        run: Compress-Archive -Path ${{steps.build.outputs.path}}/* -Destination release_artifact_portable.zip
      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release_artifact_portable.zip
          asset_name: PasteIntoFile_${{ github.event.release.tag_name }}_portable.zip
          asset_content_type: application/zip

      - uses: signpath/github-action-submit-signing-request@v1.1
        with:
          api-token: '${{ secrets.SIGNPATH_API_TOKEN }}'
          organization-id: '030bee06-17be-4a2a-a788-9efdbd14a889'
          project-slug: 'PasteIntoFile'
          signing-policy-slug: 'test-signing'
          artifact-configuration-slug: 'portable'
          github-artifact-id: '${{ steps.build.outputs.artifact-id }}'
          wait-for-completion: true
          output-artifact-directory: 'signing_result'
      - name: Show signing result
        run: |
          ls signing_result/
      - name: Create zip
        run: Compress-Archive -Path signing_result/* -Destination release_artifact_portable_signed.zip
      - name: Upload signed release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: release_artifact_portable_signed.zip
          asset_name: PasteIntoFile_${{ github.event.release.tag_name }}_portable_signed.zip
          asset_content_type: application/zip

  installer:
    runs-on: windows-2019
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build program executable
        id: build
        uses: ./.github/build
        with:
          configuration: Release
          flavor: Installer
      - name: Add WiX toolkit to PATH
        shell: bash
        run: echo "${WIX}bin" >> $GITHUB_PATH
      - name: Build MSI file with WiX toolchain
        run: |
          cd Installer
          heat dir ../${{steps.build.outputs.path}} -dr INSTALLFOLDER -ag -cg ReleaseFragment -ke -srd -sfrag -nologo -pog:Binaries -pog:Documents -pog: Satellites -pog:Sources -pog:Content -t releaseFiles.xslt -out releaseFiles.wxs
          candle releaseFiles.wxs
          candle PasteIntoFile.wxs
          light -b ../${{steps.build.outputs.path}} releaseFiles.wixobj PasteIntoFile.wixobj -ext WixNetFxExtension -out Installer.msi
      - name: Upload release artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: Installer/Installer.msi
          asset_name: PasteIntoFile_${{ github.event.release.tag_name }}_installer.msi
          asset_content_type: application/msi

